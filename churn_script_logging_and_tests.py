"""
This module contains testing functions for various parts of the churn prediction library.
Each function tests a specific component of the churn prediction process,
including data import, exploratory data analysis,
encoding helper, feature engineering, and model training.
Functions assert conditions to validate the correctness
and expected outcomes of each component to ensure reliability.

Functions:
    test_import() : Tests the data import functionality
                    by verifying a successful read and basic structure.
    test_eda() : Tests the exploratory data analysis process
                    by checking generated output files and their integrity.
    test_encoder_helper() : Tests the encoding helper function
                            by ensuring categorical data is properly encoded.
    test_perform_feature_engineering() : Tests the feature engineering process,
                                        checks the split datasets' types and structures.
    test_train_models() : Tests the model training process
                          by verifying the saving of model outputs
                          and the existence of trained models.
Author: Joel Orellana
Creation Date: 04/05/2024
"""
import os
import logging
from PIL import Image
import pandas as pd
from churn_library import (import_data,
                           perform_eda,
                           encoder_helper,
                           perform_feature_engineering,
                           train_models)

logging.basicConfig(
    filename='./logs/churn_library.log',
    level = logging.INFO,
    filemode='w',
    format='%(name)s - %(levelname)s - %(message)s')

def test_import():
    '''
    test data import - this example is completed for you to assist  with the other test functions
    '''
    try:
        df = import_data("./data/bank_data.csv")
        logging.info("Testing import_data: SUCCESS")
    except FileNotFoundError as err:
        logging.error("Testing import_eda: The file wasn't found")
        raise err

    try:
        assert df.shape[0] > 0
        assert df.shape[1] > 0
    except AssertionError as err:
        logging.error("Testing import_data: The file doesn't appear to have rows and columns")
        raise err


def test_eda():
    '''
    test perform eda function
    '''
    df = import_data("./data/bank_data.csv")
    try:
        perform_eda(df)
        image_path = "./images/eda/"
        images = [f for f in os.listdir(image_path) if f.lower().endswith('.png')]
        assert len(images) == 5 # five images of eda
        for image in images:
            pth = os.path.join(image_path, image)
            with Image.open(pth) as img:
                assert img.width > 0
        logging.info("Testing graphs generated by perform_eda: SUCCESS")
    except AssertionError as e:
        logging.error(f"Unexpected error during image validation: {e}")


def test_encoder_helper():
    '''
    test encoder helper
    '''
    try:
        df = import_data("./data/bank_data.csv")
        cat_columns = ['Gender', 'Education_Level',
                       'Marital_Status', 'Income_Category',
                       'Card_Category']
        df_encode = encoder_helper(df, cat_columns, response='Churn')
        assert isinstance(df_encode, pd.DataFrame)
        logging.info("Testing encoder_helper df created: SUCCESS")
        for column in df.columns:
            assert pd.api.types.is_numeric_dtype(df[column]),\
            f"{column} doesn't contain only numeric values"
        logging.info("df has new encoded columns: SUCCESS")
    except AssertionError as e:
        logging.error(f"The new encoded df has not been created correctly: {e}")


def test_perform_feature_engineering():
    '''
    test perform_feature_engineering
    '''
    df = import_data("./data/bank_data.csv")
    cat_columns = ['Gender', 'Education_Level',
                  'Marital_Status', 'Income_Category',
                  'Card_Category']
    print(df.info())
    try:
        X_train, X_test, y_train, y_test = perform_feature_engineering(
            df,
            cat_columns,
            response='Churn')
        assert all(isinstance(x, pd.DataFrame)
                   for x in [X_train, X_test]), "X must be DataFrames"
        assert all(isinstance(x, pd.Series)
                   for x in [y_train, y_test]), "y data must be Series"
        logging.info("testing perform_feature_engineering: SUCCESS")
    except AssertionError as e:
        logging.error(f"Feature engineering failed: {e}")


def test_train_models():
    '''
    test train_models
    '''
    df = import_data("./data/bank_data.csv")
    cat_columns = ['Gender', 'Education_Level',
                  'Marital_Status', 'Income_Category',
                  'Card_Category']
    X_train, X_test, y_train, y_test = perform_feature_engineering(
        df,
        cat_columns,
        response='Churn')
    try:
        train_models(X_train, X_test, y_train, y_test)
        model_plots_path = "./images/results/"
        model_path = "./models/"
        model_plots = [f for f in os.listdir(model_plots_path) if f.lower().endswith('.png')]
        model_saved = [f for f in os.listdir(model_path) if f.lower().endswith('.pkl')]
        assert len(model_plots) == 4
        logging.info("all model plots saved: SUCCESS")
        assert len(model_saved) == 2
        logging.info("all models saved: SUCCESS")
        logging.info("testing train_models: SUCCESS")
    except AssertionError:
        logging.error("train_models failed to store plots and models.")


if __name__ == "__main__":
    test_import()
    test_eda()
    test_encoder_helper()
    test_perform_feature_engineering()
    test_train_models()
